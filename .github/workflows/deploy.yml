name: Multi-Environment Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.set-environments.outputs.environments }}
      image-tag: ${{ steps.generate-tag.outputs.tag }}
      
    steps:
    - name: Set deployment environments
      id: set-environments
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
        else
          echo "environments=[\"dev\", \"staging\"]" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate image tag
      id: generate-tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

  test-and-build:
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.skip_tests || github.event.inputs.skip_tests == 'false' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      working-directory: ./app
      run: npm ci
      
    - name: Run linter
      working-directory: ./app
      run: npm run lint
      
    - name: Run tests
      working-directory: ./app
      run: npm run test:coverage
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: app/coverage/

  build-image:
    runs-on: ubuntu-latest
    needs: [prepare, test-and-build]
    if: ${{ always() && (needs.test-and-build.result == 'success' || needs.test-and-build.result == 'skipped') }}
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}
          ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, build-image]
    if: ${{ always() && needs.build-image.result == 'success' }}
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.prepare.outputs.environments) }}
        
    environment: 
      name: ${{ matrix.environment }}
      url: ${{ matrix.environment == 'production' && 'https://production.example.com' || format('https://{0}.example.com', matrix.environment) }}
      
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-west-2
        
    - name: Deploy to ${{ matrix.environment }}
      run: |
        echo "Deploying to ${{ matrix.environment }}"
        echo "Image: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.image-tag }}"
        
        # Example ECS deployment (adjust based on your infrastructure)
        aws ecs update-service \
          --cluster "${{ matrix.environment }}-cluster" \
          --service "${{ matrix.environment }}-service" \
          --task-definition "${{ matrix.environment }}-task:${{ needs.prepare.outputs.image-tag }}" \
          --force-new-deployment
          
    - name: Wait for deployment
      run: |
        aws ecs wait services-stable \
          --cluster "${{ matrix.environment }}-cluster" \
          --services "${{ matrix.environment }}-service"
          
    - name: Run health check
      run: |
        echo "Running health check for ${{ matrix.environment }}"
        # Replace with your actual health check URL
        HEALTH_URL="${{ matrix.environment == 'production' && 'https://production.example.com/health' || format('https://{0}.example.com/health', matrix.environment) }}"
        
        for i in {1..30}; do
          if curl -f "$HEALTH_URL"; then
            echo "Health check passed"
            break
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 10
        done

  notify:
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const { context } = github;
          const environments = ${{ needs.prepare.outputs.environments }};
          const deployStatus = '${{ needs.deploy.result }}';
          
          const message = deployStatus === 'success' 
            ? `üöÄ Deployment completed successfully to: ${environments.join(', ')}`
            : `‚ùå Deployment failed to: ${environments.join(', ')}`;
            
          // You can extend this to send notifications to Slack, Teams, etc.
          console.log(message);
          
          // Example: Create an issue comment if this was triggered by a PR
          if (context.eventName === 'pull_request') {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
          }

  rollback:
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    if: failure() && needs.deploy.result == 'failure'
    
    environment: 
      name: rollback-approval
      
    steps:
    - name: Manual rollback approval
      uses: actions/github-script@v7
      with:
        script: |
          const response = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'rollback.yml',
            ref: 'main',
            inputs: {
              'environment': '${{ matrix.environment }}',
              'reason': 'Deployment failure - automated rollback'
            }
          });
          
          console.log('Rollback workflow triggered:', response.data);