name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

permissions:
  contents: read
  security-events: write

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-scanning:
    name: Code Scanning
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        language: ['javascript']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
        
    - name: Install dependencies
      working-directory: ./app
      run: npm ci
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  dependency-scanning:
    name: Dependency Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Run npm audit
      working-directory: ./app
      run: |
        npm audit --audit-level high --json > audit-results.json || true
        
    - name: Run Snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=app/package.json --severity-threshold=high
        json: true
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif
        
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'cicd-example'
        path: './app'
        format: 'SARIF'
        
    - name: Upload OWASP results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: reports/dependency-check-report.sarif

  infrastructure-scanning:
    name: Infrastructure Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: .
        framework: terraform,dockerfile,github_actions
        output_format: sarif
        output_file_path: reports/checkov-results.sarif
        soft_fail: true
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/checkov-results.sarif
        
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform/
        format: sarif
        output_file: tfsec-results.sarif
        soft_fail: true
        
    - name: Upload tfsec results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: tfsec-results.sarif

  docker-scanning:
    name: Docker Image Scanning
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t test-image:latest -f docker/Dockerfile .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test-image:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: docker/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        
    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for security policy
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "::warning::No SECURITY.md file found"
        fi
        
    - name: Check for code of conduct
      run: |
        if [ ! -f CODE_OF_CONDUCT.md ]; then
          echo "::warning::No CODE_OF_CONDUCT.md file found"
        fi
        
    - name: Check for license
      run: |
        if [ ! -f LICENSE ]; then
          echo "::warning::No LICENSE file found"
        fi
        
    - name: Validate GitHub Actions
      uses: rhymond/github-actions-yaml-validator@v1
      with:
        file_pattern: ".github/workflows/*.yml"
        
    - name: Check branch protection
      uses: actions/github-script@v7
      with:
        script: |
          const { data: branch } = await github.rest.repos.getBranch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            branch: 'main'
          });
          
          if (!branch.protected) {
            core.warning('Main branch is not protected');
          }

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scanning, code-scanning, dependency-scanning, infrastructure-scanning, docker-scanning, compliance-check]
    if: always()
    
    steps:
    - name: Generate security summary
      uses: actions/github-script@v7
      with:
        script: |
          const jobs = [
            { name: 'Secret Scanning', result: '${{ needs.secret-scanning.result }}' },
            { name: 'Code Scanning', result: '${{ needs.code-scanning.result }}' },
            { name: 'Dependency Scanning', result: '${{ needs.dependency-scanning.result }}' },
            { name: 'Infrastructure Scanning', result: '${{ needs.infrastructure-scanning.result }}' },
            { name: 'Docker Scanning', result: '${{ needs.docker-scanning.result }}' },
            { name: 'Compliance Check', result: '${{ needs.compliance-check.result }}' }
          ];
          
          const summary = jobs.map(job => 
            `${job.result === 'success' ? '✅' : job.result === 'failure' ? '❌' : '⚠️'} ${job.name}: ${job.result}`
          ).join('\n');
          
          console.log('Security Scan Summary:');
          console.log(summary);
          
          // You can extend this to send reports to external systems
          core.summary.addHeading('Security Scan Results');
          core.summary.addRaw(summary);
          core.summary.write();