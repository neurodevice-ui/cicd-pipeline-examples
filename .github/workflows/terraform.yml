name: Terraform CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.8.0'
  TF_IN_AUTOMATION: true
  AWS_REGION: 'us-west-2'

jobs:
  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Terraform Format Check
      working-directory: ./terraform
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init -backend=false
      
    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate
      
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform/
        soft_fail: true
        
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: terraform/
        framework: terraform
        output_format: sarif
        output_file_path: reports/results.sarif
        soft_fail: true
        
    - name: Upload Checkov results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/results.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        environment: [dev, staging]
        
    environment: ${{ matrix.environment }}
    
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform/${{ matrix.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
          
    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="environment=${{ matrix.environment }}" \
          -var="tf_state_bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -var="tf_state_lock_table=${{ secrets.TF_STATE_LOCK_TABLE }}" \
          -out=tfplan-${{ matrix.environment }}
          
    - name: Save Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ matrix.environment }}-${{ github.sha }}
        path: terraform/tfplan-${{ matrix.environment }}
        retention-days: 7
        
    - name: Comment PR with Plan
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/tfplan-${{ matrix.environment }}', 'utf8');
          const output = `
          ## Terraform Plan Results - ${{ matrix.environment }}
          
          \`\`\`terraform
          ${plan}
          \`\`\`
          
          *Environment: ${{ matrix.environment }}*
          *Pusher: @${{ github.actor }}*
          *Action: ${{ github.event_name }}*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      matrix:
        environment: [dev, staging]
        
    environment: ${{ matrix.environment }}
    
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform/${{ matrix.environment }}/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
          
    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        terraform apply \
          -var="environment=${{ matrix.environment }}" \
          -var="tf_state_bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -var="tf_state_lock_table=${{ secrets.TF_STATE_LOCK_TABLE }}" \
          -auto-approve

  terraform-production:
    name: Terraform Production Deploy
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment: 
      name: production
      url: https://production.example.com
      
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=terraform/prod/terraform.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_STATE_LOCK_TABLE }}"
          
    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="environment=prod" \
          -var="tf_state_bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -var="tf_state_lock_table=${{ secrets.TF_STATE_LOCK_TABLE }}" \
          -out=tfplan-prod
          
    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply tfplan-prod